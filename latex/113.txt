% +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
% University of Southern Maine
% Department of Computer Science
% Discrete Mathematics II (COS 280)
% James Quinlan (https://cs.usm.maine.edu/~james.quinlan/)
% Section: 11.3 - Efficiency of Algorithms
% Problems: # 1, 3, 6, 10, 11, 14, 26, 43*
% +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

\begin{outline}[enumerate]

% 1.
\1 Suppose a computer takes 1 nanosecond ($=10^{-9}$ second) to execute each operation.  Approximately how long will it take the computer to execute the following numbers of operations? Convert your answers into seconds, minutes, hours, days, weeks, or years, as appropriate.  For example, instead of $2^{50}$ nanoseconds, write 13 days.

	\2 $\log_2 200$

	\2 $200$

	\2 $200 \log_2 200$

	\2 $200^2$

	\2 $200^8$

	\2 $2^{200}$



% 3.
\1 Suppose an algorithm requires $cn^3$ operations when performed with an input of size $n$ (where $c$ is a constant).  

	\2 How many operations will be required when the input size is increased from $m$ to $2m$ (where $m$ is a positive integer)?

	\2 By what factor will the number of operations increase when the input size is doubled?

	\2 By what factor will the number of operations increase when the input size is increased by a factor of ten?



% 6. Assume $n$ is a positive integer.  Compute the actual number of elementary operations (additions, subtractions, multiplications, divisions, and comparisons). that are performed.  Count only comparisons that occur within conditional statements; ignore those implied by for-next loops.  Use the theorem on polynomial orders to find an order for the algorithm segment.
\1 
\begin{verbatim}
for i = 3:n-1
  a = 3n + 2i - 1
next i
\end{verbatim}


% 10. Assume $n$ is a positive integer.  Compute the actual number of elementary operations (additions, subtractions, multiplications, divisions, and comparisons). that are performed.  Count only comparisons that occur within conditional statements; ignore those implied by for-next loops.  Use the theorem on polynomial orders to find an order for the algorithm segment.
\1 
\begin{verbatim}
for k = 2:n
  for j = 1:3n
    x = a[k] - b[j]
  next j
next k
\end{verbatim}


% 11. Assume $n$ is a positive integer.  Compute the actual number of elementary operations (additions, subtractions, multiplications, divisions, and comparisons). that are performed.  Count only comparisons that occur within conditional statements; ignore those implied by for-next loops.  Use the theorem on polynomial orders to find an order for the algorithm segment.
\1 
\begin{verbatim}
for k = 1:n-1
  for j = 1:k+1
    x = a[k] + b[j]
  next j
next k
\end{verbatim}


% 14. Assume $n$ is a positive integer.  Compute the actual number of elementary operations (additions, subtractions, multiplications, divisions, and comparisons). that are performed.  Count only comparisons that occur within conditional statements; ignore those implied by for-next loops.  Use the theorem on polynomial orders to find an order for the algorithm segment.
\1 
\begin{verbatim}
t = 0
for i = 1:n
  s = 0
  for j = 1:i
    s = s + a[j]
  next j
  t = t + s*s
next i
\end{verbatim}




% 26.
\1 According to Example 11.3.6, the maximum number of comparisons needed to perform insertion sort on an array of length five is $(1/2)(5^2 + 5 - 2) = 14$.  Find an array of length five that requires the maximum number of comparisons when insertion sort is applied to it.



% 43*
\1 Implement Horner's algorithm.  Use the theorem on polynomial orders to find an order for Algorithm 11.3.4.  How does this order compare with that of Algorithm 11.3.3?


\end{outline}
